Jag siktar på VG.
Vad är pull repektive push?

svar: 
Push betyder att man laddar upp sina filer och ändringarna i dem från sin dator och upp till Github.
Push betyder motsatsen, att du till exempel hämtar ner filerna från ett remote repository till din dator från Github, om du till exempel bytt dator,
eller om någon annan ska använda det du pushat. 


När använder man log respektive status?
svar: 
Git status använder du för att se vilka filer som är ändrade,  commitade, eller behöver commitas.
Git log skriver ut en historik över allt som comittats, med meddelandena och tidstämplar. 


Vad är en Git branch och varför är de viktiga?
svar:
En branch använder man sig av för att till exempel testa ny kod utan att riskera att påverka eller förstöra tidigare koden,
det används till exempel om man jobbar i team eller så.



Det finns flera sätt att rulla tillbaka koden till ett tidigare tillstånd. 
Förklara skillnaden och motivera när man skulle använda den ena eller andra metoden. 
Ge exempel på de kommandon du använder för att göra detta och vissa att det fungerar, vilken output du fick från git-kommandona.
Tips: Gör exemplen med att backa i en branch så att master fortfarande är korrekt. 

svar:
Jag använde mig av en branch för att testa detta. Jag gjorde ett medvetet fel, och la till en metod som inte ska vara med,
och sen commitade jag. Sen använde jag log för att visa historiken. Sedan använde jag git revert HEAD för att ångra och ta tillbaka det förra tillståndet. 
När jag använder revert så är historiken fortfarande intakt men visar även min ändring ( alltså min revert ), git reset tar också bort historiken.
Sen för att återgå till main branchen använder jag: git checkout main 

Förtydligande av svar:

git revert : används för att skapa en ny commit som återställer ändringarna från en tidigare commit. 
Detta används när man vill bevara historiken men ta bort en ändring i filen.

git reset: används för att ta bort commits och samtidigt ändra historiken. Alltså om vill ta bort en commit helt från historiken.

Nedan ligger exempel på utskrifter i ubuntu där jag använde mig av revert:

ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ git checkout -b test
Switched to a new branch 'test'
ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ nano GuessingGame.java
ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ git add GuessingGame.java
ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ git commit -m "la till ett medvetet fel i metoden"
[test 0df18bc] la till ett medvetet fel i metoden
 1 file changed, 2 insertions(+)
ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ git log
commit 0df18bc3bf0b70755b76bbcd9b94bb2af2bab78a (HEAD -> test)
Author: Eric Linde <ericlinde19@gmail.com>
Date:   Mon Oct 20 16:36:59 2025 +0200

    la till ett medvetet fel i metoden 
---------------------------------------------------------------------

ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ git revert HEAD
[test 83b9f9f] Revert "la till ett medvetet fel i metoden" var ett test, backar commiten
 1 file changed, 2 deletions(-)
ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ log
Command 'log' not found, but there are 15 similar ones.
ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ git log
commit 83b9f9f5920509e5af5b18fdb3292471dcdf2b0d (HEAD -> test)
Author: Eric Linde <ericlinde19@gmail.com>
Date:   Mon Oct 20 16:46:41 2025 +0200

    Revert "la till ett medvetet fel i metoden"
    var ett test, backar commiten

    This reverts commit 0df18bc3bf0b70755b76bbcd9b94bb2af2bab78a.

[test 83b9f9f] Revert "la till ett medvetet fel i metoden" var ett test, backar commiten
 1 file changed, 2 deletions(-)
diff --git a/GuessingGame.java b/GuessingGame.java
index bfe1bac..81abf98 100644
--- a/GuessingGame.java
+++ b/GuessingGame.java
@@ -2,7 +2,5 @@ public class GuessingGame {
     public static void main(String[] args) {
         Guesser guess = new Guesser(0, 10);
         guess.start();
        guess.ending(); --- DET HÄR VAR DET MEDVETNA FELET

     }
 }



VG Del----

Jag skapade två feature branches, feature-1 och feature-2.
Jag mergeade feature-1 in i main, vilket skapade en merge commit.

Merge:
ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ git merge feature-1
Updating e0b8a2f..6a15c21
Fast-forward
 GuessingGame.java | 2 ++
 1 file changed, 2 insertions(+)
ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ git log
commit 6a15c21b97ba50dc452f0e804a55ac3af5d0202b (HEAD -> main, feature-1)
Author: Eric Linde <ericlinde19@gmail.com>
Date:   Fri Oct 24 15:00:43 2025 +0200

    La till en kommentar som test


Jag använde sedan git rebase main på feature-2

REBASE: 

 ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ git checkout feature-2
Switched to branch 'feature-2'
ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ git rebase main
Auto-merging GuessingGame.java
CONFLICT (content): Merge conflict in GuessingGame.java
error: could not apply 503430d... La till en annan kommentar som test 2
hint: Resolve all conflicts manually, mark them as resolved with
hint: "git add/rm <conflicted_files>", then run "git rebase --continue".
hint: You can instead skip this commit: run "git rebase --skip".
hint: To abort and get back to the state before "git rebase", run "git rebase --abort".
Could not apply 503430d... La till en annan kommentar som test 2
ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ nano GuessingGame.java
ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ git add GuessingGame.java
ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ git rebase --continue
[detached HEAD 8ed0fa3] La till en annan kommentar som test 2
 1 file changed, 6 insertions(+), 1 deletion(-)
Successfully rebased and updated refs/heads/feature-2.
ericlinde@LAPTOP-NEP4J9LH:~/guessingGame$ git log
commit 8ed0fa3727e0d69e9d936ccbe649ba4847ec7fab (HEAD -> feature-2)
Author: Eric Linde <ericlinde19@gmail.com>
Date:   Fri Oct 24 15:02:50 2025 +0200


Svar: 

Merge är bra när man jobbar i team och vill behålla hela historiken.
Rebase har en rakare historik men skriver om den, vilket kan göra det svårt om man är flera.

När jag fick konflikter löste jag dem genom att öppna filen som jag ändrade i, tog bort konfliktmarkeringarna och körde -- continue.
